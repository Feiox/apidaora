{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"apidaora OpenAPI / HTTP / REST API using dataclasses and TypedDict annotation for python Documentation : https://dutradda.github.io/apidaora Source Code : https://github.com/dutradda/apidaora Key Features Declaration of request/response as dataclasses and dicts using typing annotations Input data validation with jsondaora One of the fastest python api framework Can run on any asgi server Requirements Python 3.8+ jsondaora for json validation/parsing orjson for json/bytes serialization (jsondaora dependency) Instalation $ pip install apidaora Simple example from apidaora import appdaora , route @route.get ( '/hello' ) def hello_controller ( name : str ): return f 'Hello {name}!' app = appdaora ( hello_controller ) Running the server (needs uvicorn installed ): uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Quering the server (needs curl installed ): curl -i localhost:8000/hello?name = World HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 14 \"Hello World!\" Basic example from typing import TypedDict from jsondaora import IntegerField , StringField , jsondaora from apidaora import Header , appdaora , route class Integer ( IntegerField , minimum = 18 ): ... class String ( StringField , max_length = 100 ): ... class Age ( Header , type = Integer ): ... @jsondaora class You ( TypedDict ): name : str last_name : str location : str age : int @jsondaora class ReqBody ( TypedDict ): last_name : str @jsondaora class HelloOutput ( TypedDict ): hello_message : str about_you : You @route.put ( '/hello/{name}' ) async def hello_controller ( name : str , location : String , age : Age , body : ReqBody ) -> HelloOutput : you = You ( name = name , location = location . value , age = age . value . value , last_name = body [ 'last_name' ], ) return HelloOutput ( hello_message = await hello_message ( name , location . value ), about_you = you ) async def hello_message ( name : str , location : str ) -> str : return f 'Hello {name}! Welcome to {location}!' app = appdaora ( hello_controller ) Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Quering the server: curl -i -X PUT localhost:8000/hello/Me?location = World \\ -H 'x-age: 32' \\ -d '{\"last_name\":\"My Self\"}' HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 123 {\"hello_message\":\"Hello Me! Welcome to World!\",\"about_you\":{\"name\":\"Me\",\"location\":\"World\",\"age\":32,\"last_name\":\"My Self\"}} Example for more request/response details from http import HTTPStatus from typing import Dict from jsondaora import jsondaora from apidaora import BadRequestError , Header , appdaora , json , route # Domain layer, here are the domain related definitions # it is apidaora/framework/http independent @jsondaora class You : name : str last_name : str age : int DB : Dict [ str , You ] = {} def add_you ( you ): if you . name in DB : raise YouAlreadyBeenAddedError ( you . name ) DB [ you . name ] = you def get_you ( name ): try : return DB [ name ] except KeyError : raise YouWereNotFoundError ( name ) class DBError ( Exception ): @property def info ( self ): return { 'name' : self . args [ 0 ]} class YouAlreadyBeenAddedError ( DBError ): name = 'you-already-been-added' class YouWereNotFoundError ( DBError ): name = 'you-were-not-found' # Application layer, here are the http related definitions # See: https://dutrdda.github.io/apidaora/tutorial/headers/ class ReqID ( Header , type = str , http_name = 'http_req_id' ): ... @route.post ( '/you/' ) async def add_you_controller ( req_id : ReqID , body : You ): try : add_you ( body ) except YouAlreadyBeenAddedError as error : raise BadRequestError ( name = error . name , info = error . info ) from error return json ( body , HTTPStatus . CREATED , headers = ( req_id ,)) @route.get ( '/you/{name}' ) async def get_you_controller ( name : str , req_id : ReqID ): try : return json ( get_you ( name ), headers = ( req_id ,)) except YouWereNotFoundError as error : raise BadRequestError ( name = error . name , info = error . info ) from error app = appdaora ([ add_you_controller , get_you_controller ]) Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Quering the server: curl -X POST -i localhost:8000/you/ -H 'http_req_id: 1a2b3c4d' -d '{\"name\":\"Me\",\"last_name\":\"Myself\",\"age\":32}' HTTP/1.1 201 Created date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 43 http_req_id: 1a2b3c4d {\"name\":\"Me\",\"last_name\":\"Myself\",\"age\":32} curl -i localhost:8000/you/Me -H 'http_req_id: 4d3c2b1a' HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 43 http_req_id: 4d3c2b1a {\"name\":\"Me\",\"last_name\":\"Myself\",\"age\":32} Benchmark The full results can be found here","title":"apidaora"},{"location":"#apidaora","text":"OpenAPI / HTTP / REST API using dataclasses and TypedDict annotation for python Documentation : https://dutradda.github.io/apidaora Source Code : https://github.com/dutradda/apidaora","title":"apidaora"},{"location":"#key-features","text":"Declaration of request/response as dataclasses and dicts using typing annotations Input data validation with jsondaora One of the fastest python api framework Can run on any asgi server","title":"Key Features"},{"location":"#requirements","text":"Python 3.8+ jsondaora for json validation/parsing orjson for json/bytes serialization (jsondaora dependency)","title":"Requirements"},{"location":"#instalation","text":"$ pip install apidaora","title":"Instalation"},{"location":"#simple-example","text":"from apidaora import appdaora , route @route.get ( '/hello' ) def hello_controller ( name : str ): return f 'Hello {name}!' app = appdaora ( hello_controller ) Running the server (needs uvicorn installed ): uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Quering the server (needs curl installed ): curl -i localhost:8000/hello?name = World HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 14 \"Hello World!\"","title":"Simple example"},{"location":"#basic-example","text":"from typing import TypedDict from jsondaora import IntegerField , StringField , jsondaora from apidaora import Header , appdaora , route class Integer ( IntegerField , minimum = 18 ): ... class String ( StringField , max_length = 100 ): ... class Age ( Header , type = Integer ): ... @jsondaora class You ( TypedDict ): name : str last_name : str location : str age : int @jsondaora class ReqBody ( TypedDict ): last_name : str @jsondaora class HelloOutput ( TypedDict ): hello_message : str about_you : You @route.put ( '/hello/{name}' ) async def hello_controller ( name : str , location : String , age : Age , body : ReqBody ) -> HelloOutput : you = You ( name = name , location = location . value , age = age . value . value , last_name = body [ 'last_name' ], ) return HelloOutput ( hello_message = await hello_message ( name , location . value ), about_you = you ) async def hello_message ( name : str , location : str ) -> str : return f 'Hello {name}! Welcome to {location}!' app = appdaora ( hello_controller ) Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Quering the server: curl -i -X PUT localhost:8000/hello/Me?location = World \\ -H 'x-age: 32' \\ -d '{\"last_name\":\"My Self\"}' HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 123 {\"hello_message\":\"Hello Me! Welcome to World!\",\"about_you\":{\"name\":\"Me\",\"location\":\"World\",\"age\":32,\"last_name\":\"My Self\"}}","title":"Basic example"},{"location":"#example-for-more-requestresponse-details","text":"from http import HTTPStatus from typing import Dict from jsondaora import jsondaora from apidaora import BadRequestError , Header , appdaora , json , route # Domain layer, here are the domain related definitions # it is apidaora/framework/http independent @jsondaora class You : name : str last_name : str age : int DB : Dict [ str , You ] = {} def add_you ( you ): if you . name in DB : raise YouAlreadyBeenAddedError ( you . name ) DB [ you . name ] = you def get_you ( name ): try : return DB [ name ] except KeyError : raise YouWereNotFoundError ( name ) class DBError ( Exception ): @property def info ( self ): return { 'name' : self . args [ 0 ]} class YouAlreadyBeenAddedError ( DBError ): name = 'you-already-been-added' class YouWereNotFoundError ( DBError ): name = 'you-were-not-found' # Application layer, here are the http related definitions # See: https://dutrdda.github.io/apidaora/tutorial/headers/ class ReqID ( Header , type = str , http_name = 'http_req_id' ): ... @route.post ( '/you/' ) async def add_you_controller ( req_id : ReqID , body : You ): try : add_you ( body ) except YouAlreadyBeenAddedError as error : raise BadRequestError ( name = error . name , info = error . info ) from error return json ( body , HTTPStatus . CREATED , headers = ( req_id ,)) @route.get ( '/you/{name}' ) async def get_you_controller ( name : str , req_id : ReqID ): try : return json ( get_you ( name ), headers = ( req_id ,)) except YouWereNotFoundError as error : raise BadRequestError ( name = error . name , info = error . info ) from error app = appdaora ([ add_you_controller , get_you_controller ]) Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Quering the server: curl -X POST -i localhost:8000/you/ -H 'http_req_id: 1a2b3c4d' -d '{\"name\":\"Me\",\"last_name\":\"Myself\",\"age\":32}' HTTP/1.1 201 Created date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 43 http_req_id: 1a2b3c4d {\"name\":\"Me\",\"last_name\":\"Myself\",\"age\":32} curl -i localhost:8000/you/Me -H 'http_req_id: 4d3c2b1a' HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 43 http_req_id: 4d3c2b1a {\"name\":\"Me\",\"last_name\":\"Myself\",\"age\":32}","title":"Example for more request/response details"},{"location":"#benchmark","text":"The full results can be found here","title":"Benchmark"},{"location":"changelog/","text":"CHANGELOG 0.11.4 - 2019-10-24 Fix background tasks redis 0.11.3 - 2019-10-24 Fix background tasks 0.11.2 - 2019-10-23 Improve mypy 0.11.1 - 2019-10-23 Add package typing 0.11.0 - 2019-10-22 Fix background task status code Create core module interface 0.10.0 - 2019-10-20 Add gzip upload support Create background tasks feature 0.9.0 - 2019-10-07 Improve response types Fix headers response 0.8.0 - 2019-10-07 Fix headers response 0.7.0 - 2019-10-06 Improve devtools Improve docs Refactor the entirely api 0.6.0 - 2019-10-04 Add devtools submodule Refactor path decorator Improve examples to use async def Update public interface Improve docs 0.5.0 (2019-09-20) Improves requests/responses objects 0.4.1 (2019-09-19) Improve docs 0.4.0 (2019-09-19) Rename typingjson project do jsondaora 0.3.0 (2019-09-19) Add TypedDict support Rename project 0.2.0 (2019-09-18) Refactor app and router modules 0.1.2 (2019-09-18) Improve docs 0.1.1 (2019-09-18) Fix docs 0.1.0 (2019-09-18) Add initial files","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"CHANGELOG"},{"location":"changelog/#0114-2019-10-24","text":"Fix background tasks redis","title":"0.11.4 - 2019-10-24"},{"location":"changelog/#0113-2019-10-24","text":"Fix background tasks","title":"0.11.3 - 2019-10-24"},{"location":"changelog/#0112-2019-10-23","text":"Improve mypy","title":"0.11.2 - 2019-10-23"},{"location":"changelog/#0111-2019-10-23","text":"Add package typing","title":"0.11.1 - 2019-10-23"},{"location":"changelog/#0110-2019-10-22","text":"Fix background task status code Create core module interface","title":"0.11.0 - 2019-10-22"},{"location":"changelog/#0100-2019-10-20","text":"Add gzip upload support Create background tasks feature","title":"0.10.0 - 2019-10-20"},{"location":"changelog/#090-2019-10-07","text":"Improve response types Fix headers response","title":"0.9.0 - 2019-10-07"},{"location":"changelog/#080-2019-10-07","text":"Fix headers response","title":"0.8.0 - 2019-10-07"},{"location":"changelog/#070-2019-10-06","text":"Improve devtools Improve docs Refactor the entirely api","title":"0.7.0 - 2019-10-06"},{"location":"changelog/#060-2019-10-04","text":"Add devtools submodule Refactor path decorator Improve examples to use async def Update public interface Improve docs","title":"0.6.0 - 2019-10-04"},{"location":"changelog/#050-2019-09-20","text":"Improves requests/responses objects","title":"0.5.0 (2019-09-20)"},{"location":"changelog/#041-2019-09-19","text":"Improve docs","title":"0.4.1 (2019-09-19)"},{"location":"changelog/#040-2019-09-19","text":"Rename typingjson project do jsondaora","title":"0.4.0 (2019-09-19)"},{"location":"changelog/#030-2019-09-19","text":"Add TypedDict support Rename project","title":"0.3.0 (2019-09-19)"},{"location":"changelog/#020-2019-09-18","text":"Refactor app and router modules","title":"0.2.0 (2019-09-18)"},{"location":"changelog/#012-2019-09-18","text":"Improve docs","title":"0.1.2 (2019-09-18)"},{"location":"changelog/#011-2019-09-18","text":"Fix docs","title":"0.1.1 (2019-09-18)"},{"location":"changelog/#010-2019-09-18","text":"Add initial files","title":"0.1.0 (2019-09-18)"},{"location":"contributing/","text":"Starting Development git clone git@github.com:dutradda/apidaora.git --recursive cd apidaora make setup-python-virtualenv source venv/bin/activate make setup-python-project bake setup-apidaora bake dependencies Running the integration suite: bake integration Other bake tasks: bake check-code bake tests-docs bake serve-docs bake add-changelog m = \"Add my cool feature\" You can run bake to see all tasks available.","title":"Development - Contributing"},{"location":"contributing/#starting-development","text":"git clone git@github.com:dutradda/apidaora.git --recursive cd apidaora make setup-python-virtualenv source venv/bin/activate make setup-python-project bake setup-apidaora bake dependencies","title":"Starting Development"},{"location":"contributing/#running-the-integration-suite","text":"bake integration","title":"Running the integration suite:"},{"location":"contributing/#other-bake-tasks","text":"bake check-code bake tests-docs bake serve-docs bake add-changelog m = \"Add my cool feature\" You can run bake to see all tasks available.","title":"Other bake tasks:"},{"location":"json/","text":"JavaScript Object Notation Introduction from w3schools : - https://www.w3schools.com/js/js_json_intro.asp JSON Schema Official Documentation: - https://json-schema.org","title":"JSON intro"},{"location":"json/#javascript-object-notation","text":"Introduction from w3schools : - https://www.w3schools.com/js/js_json_intro.asp","title":"JavaScript Object Notation"},{"location":"json/#json-schema","text":"Official Documentation: - https://json-schema.org","title":"JSON Schema"},{"location":"python-dataclass/","text":"Python 3.7 dataclasses module Official Documentation: - https://docs.python.org/3/library/dataclasses.html Dataclass Benchmark Data types performance comparision: - https://medium.com/@jacktator/dataclass-vs-namedtuple-vs-object-for-performance-optimization-in-python-691e234253b9","title":"Python dataclass intro"},{"location":"python-dataclass/#python-37-dataclasses-module","text":"Official Documentation: - https://docs.python.org/3/library/dataclasses.html","title":"Python 3.7 dataclasses module"},{"location":"python-dataclass/#dataclass-benchmark","text":"Data types performance comparision: - https://medium.com/@jacktator/dataclass-vs-namedtuple-vs-object-for-performance-optimization-in-python-691e234253b9","title":"Dataclass Benchmark"},{"location":"tutorial/00-intro/","text":"Tutorial - Introduction Getting Started Installs $ pip install apidaora Starts coding from apidaora import appdaora , route @route.get ( '/hello' ) def hello_controller ( name : str ): return f 'Hello {name}!' app = appdaora ( hello_controller ) Running Running the server (needs uvicorn installed ): uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Quering Quering the server (needs curl installed ): curl -i localhost:8000/hello?name = World HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 14 \"Hello World!\"","title":"Introduction"},{"location":"tutorial/00-intro/#tutorial-introduction","text":"","title":"Tutorial - Introduction"},{"location":"tutorial/00-intro/#getting-started","text":"","title":"Getting Started"},{"location":"tutorial/00-intro/#installs","text":"$ pip install apidaora","title":"Installs"},{"location":"tutorial/00-intro/#starts-coding","text":"from apidaora import appdaora , route @route.get ( '/hello' ) def hello_controller ( name : str ): return f 'Hello {name}!' app = appdaora ( hello_controller )","title":"Starts coding"},{"location":"tutorial/00-intro/#running","text":"Running the server (needs uvicorn installed ): uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Running"},{"location":"tutorial/00-intro/#quering","text":"Quering the server (needs curl installed ): curl -i localhost:8000/hello?name = World HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 14 \"Hello World!\"","title":"Quering"},{"location":"tutorial/10-using-asgi-module/","text":"Tutorial - Using ASGI module Example from typing import TypedDict from jsondaora import jsondaora , typed_dict_asjson from apidaora.core import appdaora_core , route from apidaora.core.responses import JSON_RESPONSE @jsondaora class You ( TypedDict ): name : str location : str @route.get ( '/hello/{name}' , query = True ) async def hello_controller ( path_args , query_dict , headers , body ): you = You ( name = path_args [ 'name' ], location = query_dict [ 'location' ][ 0 ]) body = typed_dict_asjson ( you , You ) return JSON_RESPONSE , body app = appdaora_core ( hello_controller ) Running Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Quering Quering the server: curl -i localhost:8000/hello/Me?location = World HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json transfer-encoding: chunked {\"name\":\"Me\",\"location\":\"World\"}","title":"Core Module"},{"location":"tutorial/10-using-asgi-module/#tutorial-using-asgi-module","text":"","title":"Tutorial - Using ASGI module"},{"location":"tutorial/10-using-asgi-module/#example","text":"from typing import TypedDict from jsondaora import jsondaora , typed_dict_asjson from apidaora.core import appdaora_core , route from apidaora.core.responses import JSON_RESPONSE @jsondaora class You ( TypedDict ): name : str location : str @route.get ( '/hello/{name}' , query = True ) async def hello_controller ( path_args , query_dict , headers , body ): you = You ( name = path_args [ 'name' ], location = query_dict [ 'location' ][ 0 ]) body = typed_dict_asjson ( you , You ) return JSON_RESPONSE , body app = appdaora_core ( hello_controller )","title":"Example"},{"location":"tutorial/10-using-asgi-module/#running","text":"Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Running"},{"location":"tutorial/10-using-asgi-module/#quering","text":"Quering the server: curl -i localhost:8000/hello/Me?location = World HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json transfer-encoding: chunked {\"name\":\"Me\",\"location\":\"World\"}","title":"Quering"},{"location":"tutorial/11-using-background-task-controller/","text":"Tutorial - Using Background Task Controller Example import time from apidaora import appdaora , route @route.background ( '/hello' ) def hello_task ( name : str ): time . sleep ( 1 ) return f 'Hello {name}!' app = appdaora ( hello_task ) Running Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Creating task Creating the task: curl -X POST -i localhost:8000/hello?name = Me HTTP/1.1 201 Created date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 110 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\"} Quering Quering the server for the task (You must replace the task_id with the server output): curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 110 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\"} Wait the task to finish and get results: sleep 1 && curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 171 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"status\":\"finished\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\"}","title":"Background Tasks"},{"location":"tutorial/11-using-background-task-controller/#tutorial-using-background-task-controller","text":"","title":"Tutorial - Using Background Task Controller"},{"location":"tutorial/11-using-background-task-controller/#example","text":"import time from apidaora import appdaora , route @route.background ( '/hello' ) def hello_task ( name : str ): time . sleep ( 1 ) return f 'Hello {name}!' app = appdaora ( hello_task )","title":"Example"},{"location":"tutorial/11-using-background-task-controller/#running","text":"Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Running"},{"location":"tutorial/11-using-background-task-controller/#creating-task","text":"Creating the task: curl -X POST -i localhost:8000/hello?name = Me HTTP/1.1 201 Created date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 110 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\"}","title":"Creating task"},{"location":"tutorial/11-using-background-task-controller/#quering","text":"Quering the server for the task (You must replace the task_id with the server output): curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 110 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\"} Wait the task to finish and get results: sleep 1 && curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 171 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"status\":\"finished\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\"}","title":"Quering"},{"location":"tutorial/12-using-async-background-task-controller/","text":"Tutorial - Using Async Background Task Controller Example import asyncio from apidaora import appdaora , route # async tasks can potentially block yours application, use with care # it use is recommended just for small tasks or non-blocking operations @route.background ( '/hello' ) async def hello_task ( name : str ): await asyncio . sleep ( 1 ) return f 'Hello {name}!' app = appdaora ( hello_task ) Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Creating task Creating the task: curl -X POST -i localhost:8000/hello?name = Me HTTP/1.1 201 Created date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 110 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\"} Quering Quering the server for the task (You must replace the task_id with the server output): curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 110 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\"} Wait the task to finish and get results: sleep 1 && curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 171 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"status\":\"finished\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\"}","title":"Async Background Tasks"},{"location":"tutorial/12-using-async-background-task-controller/#tutorial-using-async-background-task-controller","text":"","title":"Tutorial - Using Async Background Task Controller"},{"location":"tutorial/12-using-async-background-task-controller/#example","text":"import asyncio from apidaora import appdaora , route # async tasks can potentially block yours application, use with care # it use is recommended just for small tasks or non-blocking operations @route.background ( '/hello' ) async def hello_task ( name : str ): await asyncio . sleep ( 1 ) return f 'Hello {name}!' app = appdaora ( hello_task ) Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Example"},{"location":"tutorial/12-using-async-background-task-controller/#creating-task","text":"Creating the task: curl -X POST -i localhost:8000/hello?name = Me HTTP/1.1 201 Created date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 110 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\"}","title":"Creating task"},{"location":"tutorial/12-using-async-background-task-controller/#quering","text":"Quering the server for the task (You must replace the task_id with the server output): curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 110 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\"} Wait the task to finish and get results: sleep 1 && curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 171 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"status\":\"finished\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\"}","title":"Quering"},{"location":"tutorial/13-using-redis-background-task-async-controller/","text":"Tutorial - Using Background Task Controller with Redis Backend Example import asyncio import os from apidaora import appdaora , route REDIS_URI = f \"redis://{os.environ.get('REDIS', '')}\" @route.background ( '/hello' , tasks_repository = REDIS_URI ) async def hello_task ( name : str ): await asyncio . sleep ( 1 ) return f 'Hello {name}!' app = appdaora ( hello_task ) Running You will need a redis server to run this example. Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Creating task Creating the task: curl -X POST -i localhost:8000/hello?name = Me HTTP/1.1 201 Created date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 110 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\"} Quering Quering the server for the task (You must replace the task_id with the server output): curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 110 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\"} Wait the task to finish and get results: sleep 1 && curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 171 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"finished\"}","title":"Async Background Task with Redis"},{"location":"tutorial/13-using-redis-background-task-async-controller/#tutorial-using-background-task-controller-with-redis-backend","text":"","title":"Tutorial - Using Background Task Controller with Redis Backend"},{"location":"tutorial/13-using-redis-background-task-async-controller/#example","text":"import asyncio import os from apidaora import appdaora , route REDIS_URI = f \"redis://{os.environ.get('REDIS', '')}\" @route.background ( '/hello' , tasks_repository = REDIS_URI ) async def hello_task ( name : str ): await asyncio . sleep ( 1 ) return f 'Hello {name}!' app = appdaora ( hello_task )","title":"Example"},{"location":"tutorial/13-using-redis-background-task-async-controller/#running","text":"You will need a redis server to run this example. Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Running"},{"location":"tutorial/13-using-redis-background-task-async-controller/#creating-task","text":"Creating the task: curl -X POST -i localhost:8000/hello?name = Me HTTP/1.1 201 Created date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 110 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\"}","title":"Creating task"},{"location":"tutorial/13-using-redis-background-task-async-controller/#quering","text":"Quering the server for the task (You must replace the task_id with the server output): curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 110 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\"} Wait the task to finish and get results: sleep 1 && curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 171 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"finished\"}","title":"Quering"},{"location":"tutorial/14-using-redis-background-task-controller/","text":"Tutorial - Using Background Task Controller with Redis Backend Example import os import time from apidaora import appdaora , route REDIS_URI = f \"redis://{os.environ.get('REDIS', '')}\" @route.background ( '/hello' , tasks_repository = REDIS_URI ) def hello_task ( name : str ): time . sleep ( 1 ) return f 'Hello {name}!' app = appdaora ( hello_task ) Running You will need a redis server to run this example. Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Creating task Creating the task: curl -X POST -i localhost:8000/hello?name = Me HTTP/1.1 201 Created date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 110 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\"} Quering Quering the server for the task (You must replace the task_id with the server output): curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 110 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\"} Wait the task to finish and get results: sleep 1 && curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 171 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"finished\"}","title":"Background Task with Redis"},{"location":"tutorial/14-using-redis-background-task-controller/#tutorial-using-background-task-controller-with-redis-backend","text":"","title":"Tutorial - Using Background Task Controller with Redis Backend"},{"location":"tutorial/14-using-redis-background-task-controller/#example","text":"import os import time from apidaora import appdaora , route REDIS_URI = f \"redis://{os.environ.get('REDIS', '')}\" @route.background ( '/hello' , tasks_repository = REDIS_URI ) def hello_task ( name : str ): time . sleep ( 1 ) return f 'Hello {name}!' app = appdaora ( hello_task )","title":"Example"},{"location":"tutorial/14-using-redis-background-task-controller/#running","text":"You will need a redis server to run this example. Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Running"},{"location":"tutorial/14-using-redis-background-task-controller/#creating-task","text":"Creating the task: curl -X POST -i localhost:8000/hello?name = Me HTTP/1.1 201 Created date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 110 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\"}","title":"Creating task"},{"location":"tutorial/14-using-redis-background-task-controller/#quering","text":"Quering the server for the task (You must replace the task_id with the server output): curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 110 {\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"running\"} Wait the task to finish and get results: sleep 1 && curl -i localhost:8000/hello?task_id = 4ee301eb-6487-48a0-b6ed-e5f576accfc2 HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 171 {\"end_time\":\"1970-01-01T00:00:00+00:00\",\"result\":\"Hello Me!\",\"task_id\":\"4ee301eb-6487-48a0-b6ed-e5f576accfc2\",\"start_time\":\"1970-01-01T00:00:00+00:00\",\"status\":\"finished\"}","title":"Quering"},{"location":"tutorial/15-using-gzip-request-body/","text":"Tutorial - Using the gzip request body Example from apidaora import GZipFactory , appdaora , route class GzipBody ( GZipFactory ): mode = 'rt' @route.post ( '/hello' ) def gzip_hello ( body : GzipBody ): with body . open () as file : return file . read () app = appdaora ( gzip_hello ) Running Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Posting gzip file Posting the file to the api (needs gzip installed ): echo -n 'Hello World!' | gzip > hello.gz curl -X POST -i localhost:8000/hello --upload-file hello.gz HTTP/1.1 100 Continue HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 14 \"Hello World!\"","title":"Upload gzip files"},{"location":"tutorial/15-using-gzip-request-body/#tutorial-using-the-gzip-request-body","text":"","title":"Tutorial - Using the gzip request body"},{"location":"tutorial/15-using-gzip-request-body/#example","text":"from apidaora import GZipFactory , appdaora , route class GzipBody ( GZipFactory ): mode = 'rt' @route.post ( '/hello' ) def gzip_hello ( body : GzipBody ): with body . open () as file : return file . read () app = appdaora ( gzip_hello )","title":"Example"},{"location":"tutorial/15-using-gzip-request-body/#running","text":"Running the server: uvicorn myapp:app INFO: Started server process [16220] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Running"},{"location":"tutorial/15-using-gzip-request-body/#posting-gzip-file","text":"Posting the file to the api (needs gzip installed ): echo -n 'Hello World!' | gzip > hello.gz curl -X POST -i localhost:8000/hello --upload-file hello.gz HTTP/1.1 100 Continue HTTP/1.1 200 OK date: Thu, 1st January 1970 00:00:00 GMT server: uvicorn content-type: application/json content-length: 14 \"Hello World!\"","title":"Posting gzip file"}]}